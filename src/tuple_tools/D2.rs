use crate::tuple_tools::Tuple;
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123,self.124)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122,t.123) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123,self.124,self.125)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122,t.123,t.124) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123,self.124,self.125,self.126)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122,t.123,t.124,t.125) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123,self.124,self.125,self.126,self.127)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122,t.123,t.124,t.125,t.126) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123,self.124,self.125,self.126,self.127,self.128)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122,t.123,t.124,t.125,t.126,t.127) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY,DZ> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY,DZ) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ,AK,AL,AM,AN,AO,AP,AQ,AR,AS,AT,AU,AV,AW,AX,AY,AZ,BA,BB,BC,BD,BE,BF,BG,BH,BI,BJ,BK,BL,BM,BN,BO,BP,BQ,BR,BS,BT,BU,BV,BW,BX,BY,BZ,CA,CB,CC,CD,CE,CF,CG,CH,CI,CJ,CK,CL,CM,CN,CO,CP,CQ,CR,CS,CT,CU,CV,CW,CX,CY,CZ,DA,DB,DC,DD,DE,DF,DG,DH,DI,DJ,DK,DL,DM,DN,DO,DP,DQ,DR,DS,DT,DU,DV,DW,DX,DY,DZ);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25,self.26,self.27,self.28,self.29,self.30,self.31,self.32,self.33,self.34,self.35,self.36,self.37,self.38,self.39,self.40,self.41,self.42,self.43,self.44,self.45,self.46,self.47,self.48,self.49,self.50,self.51,self.52,self.53,self.54,self.55,self.56,self.57,self.58,self.59,self.60,self.61,self.62,self.63,self.64,self.65,self.66,self.67,self.68,self.69,self.70,self.71,self.72,self.73,self.74,self.75,self.76,self.77,self.78,self.79,self.80,self.81,self.82,self.83,self.84,self.85,self.86,self.87,self.88,self.89,self.90,self.91,self.92,self.93,self.94,self.95,self.96,self.97,self.98,self.99,self.100,self.101,self.102,self.103,self.104,self.105,self.106,self.107,self.108,self.109,self.110,self.111,self.112,self.113,self.114,self.115,self.116,self.117,self.118,self.119,self.120,self.121,self.122,self.123,self.124,self.125,self.126,self.127,self.128,self.129)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24,t.25,t.26,t.27,t.28,t.29,t.30,t.31,t.32,t.33,t.34,t.35,t.36,t.37,t.38,t.39,t.40,t.41,t.42,t.43,t.44,t.45,t.46,t.47,t.48,t.49,t.50,t.51,t.52,t.53,t.54,t.55,t.56,t.57,t.58,t.59,t.60,t.61,t.62,t.63,t.64,t.65,t.66,t.67,t.68,t.69,t.70,t.71,t.72,t.73,t.74,t.75,t.76,t.77,t.78,t.79,t.80,t.81,t.82,t.83,t.84,t.85,t.86,t.87,t.88,t.89,t.90,t.91,t.92,t.93,t.94,t.95,t.96,t.97,t.98,t.99,t.100,t.101,t.102,t.103,t.104,t.105,t.106,t.107,t.108,t.109,t.110,t.111,t.112,t.113,t.114,t.115,t.116,t.117,t.118,t.119,t.120,t.121,t.122,t.123,t.124,t.125,t.126,t.127,t.128) }}