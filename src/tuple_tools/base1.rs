use crate::tuple_tools::Tuple;
impl<A,B,C> Tuple for (A,B,C) {type Head = A;type Tail = (B,C);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1) }}
impl<A,B,C,D> Tuple for (A,B,C,D) {type Head = A;type Tail = (B,C,D);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2) }}
impl<A,B,C,D,E> Tuple for (A,B,C,D,E) {type Head = A;type Tail = (B,C,D,E);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3) }}
impl<A,B,C,D,E,F> Tuple for (A,B,C,D,E,F) {type Head = A;type Tail = (B,C,D,E,F);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4) }}
impl<A,B,C,D,E,F,G> Tuple for (A,B,C,D,E,F,G) {type Head = A;type Tail = (B,C,D,E,F,G);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5) }}
impl<A,B,C,D,E,F,G,H> Tuple for (A,B,C,D,E,F,G,H) {type Head = A;type Tail = (B,C,D,E,F,G,H);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6) }}
impl<A,B,C,D,E,F,G,H,I> Tuple for (A,B,C,D,E,F,G,H,I) {type Head = A;type Tail = (B,C,D,E,F,G,H,I);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7) }}
impl<A,B,C,D,E,F,G,H,I,J> Tuple for (A,B,C,D,E,F,G,H,I,J) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8) }}
impl<A,B,C,D,E,F,G,H,I,J,K> Tuple for (A,B,C,D,E,F,G,H,I,J,K) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23) }}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z> Tuple for (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z) {type Head = A;type Tail = (B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z);fn split_first(self) -> (Self::Head, Self::Tail) { (self.0, (self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24,self.25)) }fn construct(h: Self::Head, t: Self::Tail) -> Self { (h, t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23,t.24) }}