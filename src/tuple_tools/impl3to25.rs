use crate::tuple_tools::Tuple;
impl<A,B,C,Aug>Tuple<Aug>for(A,B,C){type Head=A;type Tail=(B,C);type Augmented=(Aug,A,B,C);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1)}fn len()->usize{3}}
impl<A,B,C,D,Aug>Tuple<Aug>for(A,B,C,D){type Head=A;type Tail=(B,C,D);type Augmented=(Aug,A,B,C,D);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2)}fn len()->usize{4}}
impl<A,B,C,D,E,Aug>Tuple<Aug>for(A,B,C,D,E){type Head=A;type Tail=(B,C,D,E);type Augmented=(Aug,A,B,C,D,E);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3)}fn len()->usize{5}}
impl<A,B,C,D,E,F,Aug>Tuple<Aug>for(A,B,C,D,E,F){type Head=A;type Tail=(B,C,D,E,F);type Augmented=(Aug,A,B,C,D,E,F);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4)}fn len()->usize{6}}
impl<A,B,C,D,E,F,G,Aug>Tuple<Aug>for(A,B,C,D,E,F,G){type Head=A;type Tail=(B,C,D,E,F,G);type Augmented=(Aug,A,B,C,D,E,F,G);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5)}fn len()->usize{7}}
impl<A,B,C,D,E,F,G,H,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H){type Head=A;type Tail=(B,C,D,E,F,G,H);type Augmented=(Aug,A,B,C,D,E,F,G,H);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6)}fn len()->usize{8}}
impl<A,B,C,D,E,F,G,H,I,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I){type Head=A;type Tail=(B,C,D,E,F,G,H,I);type Augmented=(Aug,A,B,C,D,E,F,G,H,I);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7)}fn len()->usize{9}}
impl<A,B,C,D,E,F,G,H,I,J,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8)}fn len()->usize{10}}
impl<A,B,C,D,E,F,G,H,I,J,K,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9)}fn len()->usize{11}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10)}fn len()->usize{12}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11)}fn len()->usize{13}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12)}fn len()->usize{14}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13)}fn len()->usize{15}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14)}fn len()->usize{16}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15)}fn len()->usize{17}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16)}fn len()->usize{18}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17)}fn len()->usize{19}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18)}fn len()->usize{20}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19)}fn len()->usize{21}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20)}fn len()->usize{22}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21)}fn len()->usize{23}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22)}fn len()->usize{24}}
impl<A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Aug>Tuple<Aug>for(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y){type Head=A;type Tail=(B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y);type Augmented=(Aug,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y);fn split_first(self)->(Self::Head,Self::Tail){(self.0,(self.1,self.2,self.3,self.4,self.5,self.6,self.7,self.8,self.9,self.10,self.11,self.12,self.13,self.14,self.15,self.16,self.17,self.18,self.19,self.20,self.21,self.22,self.23,self.24))}fn construct(h:Self::Head,t:Self::Tail)->Self{(h,t.0,t.1,t.2,t.3,t.4,t.5,t.6,t.7,t.8,t.9,t.10,t.11,t.12,t.13,t.14,t.15,t.16,t.17,t.18,t.19,t.20,t.21,t.22,t.23)}fn len()->usize{25}}